{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,IAAKL,SAASC,cAAc,oBAG9BH,EAAKC,KAAKO,iBAAiB,UAI3B,SAAkBC,GAChBA,EAAEC,iBACF,MAAMN,EAAQO,OAAOX,EAAKI,MAAMQ,QA4BlC,SAAuBC,EAAUT,GAC/B,OAAO,IAAIU,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACTP,GAAY,EACRI,EACFF,EAAQ,C,SAAEF,E,MAAUT,IAGpBY,EAAO,C,SAAEH,E,MAAUT,GAAQ,GAG5BA,EAAM,G,EAvCXiB,CALa,EAKWjB,GACrBkB,MACC,EAACT,SAAEA,EAAQT,MAAEA,MACXmB,QAAQC,IAAI,uBAAuBX,QAAeT,OAClDqB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAuBd,QAAeT,OAEjC,C,SAAES,E,MAAUT,MAErB,EAACS,SAAEA,EAAQT,MAAEA,MACXmB,QAAQC,IAAI,sBAAsBX,QAAeT,OACjDqB,EAAA3B,GAAS4B,OAAOE,QACd,sBAAsBf,QAAeT,OAEhC,C,SAAES,E,MAAUT,MAGtBkB,MAAK,EAACT,SAAEA,EAAQT,MAAEA,MA0BvB,SAA0BS,EAAUT,GAC3B,IAAIU,SAAQ,CAACC,EAASC,KAC3B,MAAMX,EAAOM,OAAOX,EAAKK,KAAKO,OACxBN,EAASK,OAAOX,EAAKM,OAAOM,OAClC,IAAIiB,EAAaC,aAAY,KAC3B,MAAMb,EAAgBC,KAAKC,SAAW,GACtCN,GAAY,EACZT,GAASC,EAELY,GACFF,EAAQ,C,SAAEF,E,MAAUT,IACpBmB,QAAQC,IAAI,uBAAuBX,QAAeT,OAClDqB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAuBd,QAAeT,SAIxCY,EAAO,C,SAAEH,E,MAAUT,IACnBmB,QAAQC,IAAI,sBAAsBX,QAAeT,OACjDqB,EAAA3B,GAAS4B,OAAOE,QACd,sBAAsBf,QAAeT,QAIrCS,IAAaP,GACfyB,cAAcF,EAAW,GAE1BxB,EAAK,G,CApDN2B,CAAiBnB,EAAUT,GACpB,C,SAAES,E,MAAUT,MAEpB6B,OAAM,EAACpB,SAAEA,EAAQT,MAAEA,MAClBmB,QAAQC,IAAI,sBAAsBX,QAAeT,OACjDqB,EAAA3B,GAAS4B,OAAOE,QAAQ,sBAAsBf,QAAeT,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["// const { formats } = require('flatpickr/dist/utils/formatting');\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nlet position = 0;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const delay = Number(refs.delay.value);\n  createPromise(position, delay)\n    .then(\n      ({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        return { position, delay };\n      },\n      ({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        return { position, delay };\n      }\n    )\n    .then(({ position, delay }) => {\n      createPromiseSet(position, delay);\n      return { position, delay };\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      position += 1;\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n\nfunction createPromiseSet(position, delay) {\n  return new Promise((resolve, reject) => {\n    const step = Number(refs.step.value);\n    const amount = Number(refs.amount.value);\n    let intervalID = setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      position += 1;\n      delay += step;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // Reject\n      }\n      if (position === amount) {\n        clearInterval(intervalID);\n      }\n    }, step);\n  });\n}\n\nfunction onFulfill({ position, delay }) {\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\nfunction onReject({ position, delay }) {\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","btn","addEventListener","e","preventDefault","Number","value","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$createPromise","then","console","log","$parcel$interopDefault","Notify","success","failure","intervalID","setInterval","clearInterval","$47d4ff9957288465$var$createPromiseSet","catch"],"version":3,"file":"03-promises.0f5b10d2.js.map"}